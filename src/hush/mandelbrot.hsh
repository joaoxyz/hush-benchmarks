function pow(b, e)
    b = std.float(b)
    e = std.int(e)

    let acc = 1.0

    if e == 0 then
        return 1.0
    end

    if e < 0 then
        b = 1.0/b
        e = -e
    end

    while e > 0 do
        acc = acc * b
        e = e - 1
    end

    acc
end

function print_byte(val)
    { perl -e "print chr($val)" }?
end

let bit_num = 0
let byte_acc = 0
let i = 0
let iter = 50
let x = 2.0
let y = 2.0
let limit = 2.0
let Zr = 0.0
let Zi = 0.0
let Cr = 0.0
let Ci = 0.0
let Tr = 0.0
let Ti = 0.0

let size = std.int(std.args()[0])

std.print("P4\n")
let fmt_str = std.to_string(size) ++ " " ++ std.to_string(size) ++ "\n"
std.print(fmt_str)

for y in std.range(0, size, 1) do
    for x in std.range(0, size, 1) do
        Ti = 0.0
        Zr = Ti
        Zi = Ti
        Tr = Ti
        Cr = (2.0 * std.float(x) / std.float(size) - 1.5)
        Ci = (2.0 * std.float(y) / std.float(size) - 1.0)

        for i in std.range(0, iter, 1) do
            if Tr+Ti <= limit*limit then
                Zi = 2.0*Zr*Zi + Ci
                Zr = Tr - Ti + Cr
                Tr = Zr * Zr
                Ti = Zi * Zi
            end
        end

        byte_acc = byte_acc * 2
        if Tr+Ti <= limit*limit then
            # bitwise OR
            byte_acc = if byte_acc % 2 == 0 then byte_acc+1 else byte_acc end
        end

        bit_num = bit_num + 1

        if bit_num == 8 then
            print_byte(byte_acc)
            byte_acc = 0
            bit_num = 0
        end
    end
    if bit_num > 0 then
        let padding_shifts = 8 - bit_num
        byte_acc = byte_acc * std.int(pow(2, padding_shifts))
        print_byte(byte_acc)
        byte_acc = 0
        bit_num = 0
    end
end

#std.print(output)
