let PI = 3.14159265358979323
let SOLAR_MASS = 4.0 * PI * PI
let DAYS_PER_YEAR = 365.24

let Body = function(x, y, z, vx, vy, vz, mass)
    @[
        x: x,
        y: y,
        z: z,
        vx: vx,
        vy: vy,
        vz: vz,
        mass: mass,
    ]
end

function sqrt(n)
    let x = n
    let y = 1.0
    let err = 0.0000001

    while x - y > err do
        x = (x + y) / 2.0
        y = n / x
    end
    x
end

function offset_momentum(bodies)
    let px = 0.0
    let py = 0.0
    let pz = 0.0

    for b in std.iter(bodies) do
        px = px + (b.vx * b.mass)
        py = py + (b.vy * b.mass)
        pz = pz + (b.vz * b.mass)
    end

    let b = bodies[0]
    b.vx = - px / SOLAR_MASS
    b.vy = - py / SOLAR_MASS
    b.vz = - pz / SOLAR_MASS
end

function energy(bodies)
    let e = 0.0
    let num_bodies = std.len(bodies)
    for i in std.range(0, num_bodies, 1) do
        let b = bodies[i]
        let sq = b.vx * b.vx + b.vy * b.vy + b.vz * b.vz
        e = e + (0.5 * b.mass * sq)
        for j in std.range(i+1, num_bodies, 1) do
            let dx = b.x - bodies[j].x
            let dy = b.y - bodies[j].y
            let dz = b.z - bodies[j].z
            let d_sq = dx * dx + dy * dy + dz * dz
            e = e - (b.mass * bodies[j].mass) / sqrt(d_sq)
        end
    end
    e
end

function advance(bodies, dt)
    let num_bodies = std.len(bodies)

    for i in std.range(0, num_bodies, 1) do
        for j in std.range(i + 1, num_bodies, 1) do
            let dx = bodies[i].x - bodies[j].x
            let dy = bodies[i].y - bodies[j].y
            let dz = bodies[i].z - bodies[j].z

            let dpos_norm_sq = dx * dx + dy * dy + dz * dz
            let mag = dt / (dpos_norm_sq * sqrt(dpos_norm_sq))

            let mj = bodies[j].mass * mag
            bodies[i].vx = bodies[i].vx - dx * mj
            bodies[i].vy = bodies[i].vy - dy * mj
            bodies[i].vz = bodies[i].vz - dz * mj

            let mi = bodies[i].mass * mag
            bodies[j].vx = bodies[j].vx + dx * mi
            bodies[j].vy = bodies[j].vy + dy * mi
            bodies[j].vz = bodies[j].vz + dz * mi
        end
    end

    for i in std.range(0, num_bodies, 1) do
        bodies[i].x = bodies[i].x + bodies[i].vx * dt
        bodies[i].y = bodies[i].y + bodies[i].vy * dt
        bodies[i].z = bodies[i].z + bodies[i].vz * dt
    end
end

function nbody(n)
    let bodies = [
        # sun
        Body(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, SOLAR_MASS),

        # jupiter
        Body(
            4.84143144246472090,
            -1.16032004402742839,
            -1.03622044471123109 * 0.1,
            1.66007664274403694 * 0.001 * DAYS_PER_YEAR,
            7.69901118419740425 * 0.001 * DAYS_PER_YEAR,
            -6.90460016972063023 * 0.00001 * DAYS_PER_YEAR,
            9.54791938424326609 * 0.0001 * SOLAR_MASS
        ),

        # saturn
        Body(
            8.34336671824457987,
            4.12479856412430479,
            -4.03523417114321381 * 0.1,
            -2.76742510726862411 * 0.001 * DAYS_PER_YEAR,
            4.99852801234917238 * 0.001 * DAYS_PER_YEAR,
            2.30417297573763929 * 0.00001 * DAYS_PER_YEAR,
            2.85885980666130812 * 0.0001 * SOLAR_MASS
        ),

        # uranus
        Body(
            1.28943695621391310 * 10.0,
            -1.51111514016986312 * 10.0,
            -2.23307578892655734 * 0.1,
            2.96460137564761618 * 0.001 * DAYS_PER_YEAR,
            2.37847173959480950 * 0.001 * DAYS_PER_YEAR,
            -2.96589568540237556 * 0.00001 * DAYS_PER_YEAR,
            4.36624404335156298 * 0.00001 * SOLAR_MASS
        ),

        # neptune
        Body(
            1.53796971148509165 * 10.0,
            -2.59193146099879641 * 10.0,
            1.79258772950371181 * 0.1,
            2.68067772490389322 * 0.001 * DAYS_PER_YEAR,
            1.62824170038242295 * 0.001 * DAYS_PER_YEAR,
            -9.51592254519715870 * 0.00001 * DAYS_PER_YEAR,
            5.15138902046611451 * 0.00001 * SOLAR_MASS
        )
    ]

    offset_momentum(bodies)
    std.print(energy(bodies))
    for i in std.range(0, n, 1) do
        advance(bodies, 0.01)
    end
    std.print('\n')
    std.print(energy(bodies))
end

nbody(std.int(std.args()[0]))
